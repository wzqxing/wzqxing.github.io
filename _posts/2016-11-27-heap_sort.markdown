---
layout:     post
title:      "堆的性质以及堆排序"
subtitle:   "堆"
data:       2016-11-27
authori:    "silence"
header-img: ""
tags:
        - 代码
        - 算法



---

## 堆(heap)

堆是一个近似完全二叉树，除了最底层，该数都是满的。最大堆中 **父结点** 的值 *大于等于* **子结点** 。
堆的数据结构是一个数组 *heap.date* ，数组的元素数 *heap.date_length* ，堆的有效元素 *heap.size* 。

```
typedef int HeatEleType;

typedef struct
{
  HeatEleType *date;
  int size;
  int date_length;
} heap;
```

若设最大堆的根结点的索引为1，则：

```
int parent(int index)
{
  return index/2;
}

int left(int index)
{
  return index*2;
}

int right(int index)
{
  return index*2+1;
}
```

若最大堆的根结点的索引为0，则：

```
int parent(int index)
{
  return int(index/2-0.5);
}

int left(int index)
{
  return index*2+1;
}

int right(int index)
{
  return index*2+2;
}
```

为了方便起见，以下讨论均以根结点索引为1为基础。

堆的基本过程：
- *max_heapify* ：维护最大堆的性质
- *build_max_heap*：建造最大堆
- *heap_sort*：堆排序

## *max_heapify*

*max_heapify* 是用来维护堆的性质的重要过程。它的输入为堆和索引 *index* ，*max_heapify* 通过让 *heap.date[index]* 的值在最大堆中“逐级下降”，从而使得以索引 *index* 为根结点的子树重新遵循最大堆的性质。

```
void max_heapify(heap &H,int index)
{
  int l,r,largest;
  int temp;

  l = left(index)
  r = right(index)

  if ( l <= H.size    &&    H.date[l] > H.date[index] )
    largest = l;
  else
    largest = index;

  if ( r <= H.size    &&    H.date[r] > H.date[largest] )
      largest = r;

  if ( largest != index )
  {
    temp = date[largest];
    date[largest] = date[index];
    date[index] = temp;
    max_heapify( H,largest );
  }

}
```

以上是通过递归来实现，非递归代码如下：

```
void max_heapify( heap &H, int index)
{
  int l,r,largest,i,temp;
  i = index;

  while ( 1 )
  {
    l = left(i);
    r = right(i);

    if ( l <= H.size    &&    H.date[l] > H.date[i] )
      largest = l;
    else
      largest = i;

    if ( r <= H.size    &&    H.date[r] > H.date[largest] )
        largest = r;

    if ( largest > i )
    {
      temp = H.date[largest];
      H.date[largest] = H.date[i];
      H.date[i] = temp;

      i = largest;
    }
    else
      break;
  }
}
```

## *initHeap*

通过自底向上的方法利用　*max_heapify*　把一个数组转换为一个最大堆。

```
void initHeap( heap &H,HeatEleType *list,int n)
{
  H.date = new HeatEleType[n+1];
  if(!H.date)
  {
    cerr<<"堆存储分配失败";
    exit(1);
  }
  H.size = n;
  int i;


  for(i=0; i<n; i++)
    H.date[i+1] = list[i];

//自底向上建立堆，叶节点无须此过程
  for(i=n/2; i>=1; i--)
    max_heapify(H,i);

}
```

>为什么循环变量是从n/2到１递减，而不是从１到n/2递增？
>
因为初始时列表并不是一个堆，不能使用*max_heapify*，所以必须是自底向上建堆

## 堆排序(heap_sort)

```
void heap_sort( heap &H, HeatEleType *date, int n)
{
  initHeap(H,date,n);
  int i;
  int temp;
  for( i=H.size; i>=2; i--)
  {
    temp = H.date[i];
    H.date[i] = H.date[1];
    H.date[1] = temp;
    H.size -= 1;
    max_heapify(H,1);
  }

  for(i=0; i<n;i++)
    date[i] = H.date[i+1];
}
```

>参考算法导论第六章
